package uelbosque.lerni.service;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import uelbosque.lerni.DAO.CalificacionDAO;
import uelbosque.lerni.model.Calificacion;


@RestController
@RequestMapping("/calificacion")
public class CalificacionService {

	@Autowired
	CalificacionDAO calificacionDAO;
	
	@CrossOrigin(origins ="*")
	@PostMapping("/calificacion")
	public Calificacion crearPersona(@Valid @RequestBody Calificacion inv){
		return calificacionDAO.save(inv);
	}
	
	@CrossOrigin(origins ="*")
	/* tomar todas las personas*/
	@GetMapping("/calificaciones")
	public List<Calificacion> getAllPersons(){
		 return calificacionDAO.findAll();
	}
	
	@CrossOrigin(origins ="*")
	/* obtener persona por ID*/
	@GetMapping ("/calificaciones/{id}")
	public ResponseEntity<Calificacion> getPersonaById(@PathVariable(value="id") Long empid){
		
		Calificacion ciu= calificacionDAO.finOne(empid);
		if(ciu==null){
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok().body(ciu);
	}
	
	@CrossOrigin(origins ="*")
	/* actualizar persona por id*/
	@PutMapping("/calificacion/{id}")
	public ResponseEntity<Calificacion> updatePersona(@PathVariable(value="id") Long empid, @Valid @RequestBody Calificacion calificacionDetalle){
		Calificacion dir = calificacionDAO.finOne(empid);
		if(dir==null){
			return ResponseEntity.notFound().build();
		}
		
		dir.setCedula(administradorDetalle.getCedula());
		dir.setNombres(administradorDetalle.getNombres());
		dir.setApellidos(administradorDetalle.getApellidos());
		dir.setCod_usuario(administradorDetalle.getCod_usuario());
		
		Calificacion actualizar= calificacionDAO.save(dir);
		return ResponseEntity.ok().body(dir);
		
	}
	
}
