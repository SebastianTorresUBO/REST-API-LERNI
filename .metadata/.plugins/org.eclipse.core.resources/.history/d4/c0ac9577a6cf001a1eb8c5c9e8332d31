package uelbosque.lerni.service;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import uelbosque.lerni.DAO.DirectorDAO;
import uelbosque.lerni.model.Director;
import uelbosque.lerni.model.SolicitudesDeRegistro;



@RestController
@RequestMapping("/director")
public class DirectorService {

	@Autowired
	DirectorDAO directorDAO;
	
	@CrossOrigin(origins ="*")
	@PostMapping("/nuevo-director")
	public Director crearPersona(@Valid @RequestBody Director inv){
		return directorDAO.save(inv);
	}
	
	@CrossOrigin(origins ="*")
	/* tomar todas las personas*/
	@GetMapping("/directores")
	public List<Director> getAllPersons(){
		 return directorDAO.findAll();
	}
	
	@CrossOrigin(origins ="*")
	/* obtener persona por ID*/
	@GetMapping ("/directores/{id}")
	public ResponseEntity<Director> getPersonaById(@PathVariable(value="id") Long empid){
		
		Director ciu= directorDAO.finOne(empid);
		if(ciu==null){
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok().body(ciu);
	}
	
	@CrossOrigin(origins ="*")
	/* actualizar persona por id*/
	@PutMapping("/director/{id}")
	public ResponseEntity<Director> updatePersona(@PathVariable(value="id") Long empid, @Valid @RequestBody Director directorDetalle){
		SolicitudesDeRegistro sol = solicitudUsuarioDAO.finOne(empid);
		if(sol==null){
			return ResponseEntity.notFound().build();
		}
		
		sol.setEstadoSolicitud(solicitudDetalle.getEstadoSolicitud());
		
		SolicitudesDeRegistro actualizar= solicitudUsuarioDAO.save(sol);
		return ResponseEntity.ok().body(sol);
		
	}
	
}
